//
//  File    : sort240.cpp
//  Usage   : sort240 [options] field file
//  options : -r : sort in descending order
//            -i : ignore case
//            -n : sort field should be treated as a number
//  field   : a particular field on each line (int value).
//  file    : name of text file     
//  Author  : Nathan Standiford <ns@byu.edu>
//

#include <cstdlib>
#include <iostream>
#include <fstream>
#include <cstring>
using namespace std;

const int MAX = 100;
int field = 0;          //field param
bool descFlag = false;   //descending flag 
bool ignoreFlag = false; //ignore case flag
bool numFlag = false;    //number field flag

char * skipWhiteSpace(char * line) {
  if(isspace(*line)) {
      return skipWhiteSpace(line++);
  } else {
      return line;
  }
}

char * skipText(char * line) {
  if(isspace(*line)) {
      return line;
	} else {
      return line; 
    }
}

int compareWithFlags(char * first, char * second) {
}

void setField(char * first, char * second) {
  setField(first,second,(field - 1));
}

void setField(char * first, char * second, int field) {
  if(field > 0) {
    
  }
}

int compare(const void * a, const void * b) {
  const char * ia = (const char *) a;
  const char * ib = (const char *) b;
  char * first = new char[MAX];
  strcpy(first,ia);
  
  char * second = new char[MAX];
  strcpy(second,ib);
  setField(first,second);
  int val = strcmp(first,second);
  delete[] first;
  delete[] second;

  return val;
}
void processFlags(char * flags) {
  if(*flags == '-') {
    flags++;
    processFlags(flags); 
  } else if(*flags == 'r') {
    descFlag = true;
    flags++;
    processFlags(flags);
  } else if(*flags == 'n') {
    numFlag == true;
    flags++;
    processFlags(flags);
  } else if(*flags == 'i') {
    ignoreFlag = true;
    flags++;
    processFlags(flags);
  }
}


void processTokens(int argc, char** argv) {
  const int FLAG_INCLUDE = 3;
  argv++;
  if(argc == FLAG_INCLUDE) {
    processFlags(*argv);
    argv++;
  }
  field = atoi(*argv);
  argv++;
}
bool checkSpace(char * data) {
  char * d = *data;  d = data;
  chkSpace(
}
bool chkSpace(char * d) {
}

int main(&argc, argv) {
  processTokens(argc, argv);
  fstream in(*argv);
 
  char data[MAX][MAX];
  int count = 0; 
  for(count = 0; count<MAX && in.good(); count++) {
    in.getline(static_cast<char*>(data[count]),static_cast<int>(MAX));
    
  }
  qsort(data,count,MAX,compare);

  for(int i=0; i < count; i++) {
  cout << data[i]
       << endl;
  }
}

